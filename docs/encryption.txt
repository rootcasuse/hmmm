# ENCRYPTION ALGORITHMS AND IMPLEMENTATION

## Overview
SafeHarbor implements a multi-layered encryption system using modern cryptographic standards through the Web Crypto API. The system employs different encryption strategies based on content type and security requirements.

## Core Encryption Algorithms

### 1. AES-256-GCM (Advanced Encryption Standard - Galois/Counter Mode)
**Primary Use**: Text messages, audio data, and general content encryption
**Key Size**: 256 bits
**IV Size**: 96 bits (12 bytes)
**Authentication**: Built-in GMAC authentication tag

**Implementation Details**:
```javascript
// Message encryption with AES-GCM
const encryptMessage = async (message: string): Promise<EncryptedData> => {
  const key = await window.crypto.subtle.generateKey(
    { name: 'AES-GCM', length: 256 },
    false,
    ['encrypt']
  );

  const encoder = new TextEncoder();
  const data = encoder.encode(message);
  const iv = window.crypto.getRandomValues(new Uint8Array(12));

  const encryptedData = await window.crypto.subtle.encrypt(
    { name: 'AES-GCM', iv },
    key,
    data
  );

  return {
    data: new Uint8Array(encryptedData),
    iv
  };
};
```

**Security Properties**:
- Confidentiality: 256-bit key provides ~2^256 security level
- Integrity: GMAC authentication prevents tampering
- Performance: Hardware acceleration available on modern processors
- Authenticated Encryption: Single operation provides both encryption and authentication

### 2. ECDH P-256 (Elliptic Curve Diffie-Hellman)
**Primary Use**: Key exchange and shared secret establishment
**Curve**: P-256 (secp256r1)
**Security Level**: ~128-bit equivalent

**Implementation**:
```javascript
const generateKeyPair = async (): Promise<KeyPair> => {
  const keyPair = await window.crypto.subtle.generateKey(
    {
      name: 'ECDH',
      namedCurve: 'P-256'
    },
    false,
    ['deriveKey']
  );

  return {
    publicKey: keyPair.publicKey,
    privateKey: keyPair.privateKey
  };
};
```

**Use Cases by Content Type**:

### Text Messages
- **Algorithm**: AES-256-GCM
- **Key Derivation**: HKDF-SHA256 with unique salt per message
- **Forward Secrecy**: Ephemeral keys derived for each message
- **Implementation**: `src/context/CryptoContext.tsx`

```javascript
// Forward secrecy implementation
static async encryptWithForwardSecrecy(
  message: string,
  sharedSecret: CryptoKey
): Promise<EncryptedData> {
  const salt = window.crypto.getRandomValues(new Uint8Array(32));
  const messageKey = await this.deriveMessageKey(
    sharedSecret,
    salt,
    `message-${this.messageCounter++}`
  );
  
  // Encrypt with ephemeral key
  const encoder = new TextEncoder();
  const data = encoder.encode(message);
  const iv = window.crypto.getRandomValues(new Uint8Array(12));

  const encryptedData = await window.crypto.subtle.encrypt(
    { name: 'AES-GCM', iv },
    messageKey,
    data
  );

  return { data: new Uint8Array(encryptedData), iv, salt };
}
```

### Audio Messages
- **Algorithm**: AES-256-GCM
- **Format**: WebM/Opus preferred, fallback to MP4/WAV
- **Process**: Audio blob → Base64 → AES encryption
- **Bitrate**: 128 kbps for optimal size/quality balance

```javascript
// Audio encryption process
const handleSendAudio = async (audioBlob: Blob, duration: number) => {
  const reader = new FileReader();
  reader.onload = async (event) => {
    const audioDataUrl = event.target?.result as string;
    // audioDataUrl is encrypted using same AES-GCM process as text
    await sendMessage(audioDataUrl, 'audio');
  };
  reader.readAsDataURL(audioBlob);
};
```

### Images
- **Algorithm**: AES-256-GCM for integrity and confidentiality
- **Size Limit**: 5MB maximum
- **Format**: Data URL encoding before encryption
- **Integrity**: GMAC tag prevents image tampering

### Files/Documents
- **Hybrid Approach**: RSA key wrapping + AES content encryption
- **Document Signing**: ECDSA P-256 signatures
- **Hash Function**: SHA-256 for document integrity
- **Implementation**: `src/utils/signing.ts`

## Algorithm Comparison and Justification

### AES-256-GCM vs AES-256-CBC
**Chosen**: AES-256-GCM
**Justification**:
- Authenticated encryption (integrity + confidentiality)
- Parallel processing capability
- No padding oracle vulnerabilities
- Hardware acceleration support

### P-256 vs P-384 vs RSA-2048
**Chosen**: P-256 (ECDH/ECDSA)
**Justification**:
- Equivalent security to RSA-3072 with smaller key size
- Better performance than RSA
- Wide browser support
- NSA Suite B approved

### SHA-256 vs SHA-3 vs BLAKE2
**Chosen**: SHA-256
**Justification**:
- Universal browser support
- FIPS 140-2 approved
- Proven security track record
- Hardware acceleration available

## Performance vs Security Tradeoffs

### Key Size Decisions
- **256-bit AES**: Provides post-quantum security margin
- **P-256 ECC**: Balances security with performance
- **96-bit IV**: Optimal for GCM mode (recommended size)

### Performance Metrics (Typical Browser)
- **Key Generation**: 10-50ms for ECDSA/ECDH pairs
- **AES Encryption**: ~1ms per KB
- **ECDSA Signing**: 1-5ms per signature
- **ECDSA Verification**: 2-10ms per verification

### Memory Usage
- **Session Keys**: ~1KB total for all cryptographic material
- **Message Overhead**: 28 bytes (12-byte IV + 16-byte auth tag)
- **Certificate Size**: ~500 bytes per certificate

## Security Considerations

### Key Management
- **Ephemeral Keys**: Generated per session, never persisted
- **Forward Secrecy**: HKDF ensures past messages remain secure
- **Secure Cleanup**: Explicit memory wiping on session end

### Cryptographic Agility
The modular design allows for algorithm upgrades:
- Key sizes can be increased (P-384, AES-512)
- New algorithms can be added (post-quantum cryptography)
- Hash functions can be upgraded (SHA-3, BLAKE2)

### Implementation Security
- **Web Crypto API**: Uses browser's native cryptographic implementations
- **Constant-Time Operations**: Provided by browser crypto engine
- **Side-Channel Resistance**: Hardware-backed when available

## Code Examples

### Complete Message Encryption Flow
```javascript
// 1. Generate ephemeral key pair
const ephemeralKeys = await generateKeyPair();

// 2. Derive shared secret with peer
const sharedSecret = await deriveSharedSecret(ephemeralKeys.privateKey, peerPublicKey);

// 3. Encrypt message with forward secrecy
const encryptedMessage = await encryptWithForwardSecrecy(message, sharedSecret);

// 4. Sign encrypted message
const signature = await signMessage(encryptedMessage, signingPrivateKey);

// 5. Transmit encrypted message + signature + certificate
```

### Error Handling
```javascript
try {
  const encryptedData = await encryptMessage(message);
} catch (error) {
  if (error.name === 'OperationError') {
    // Cryptographic operation failed
    throw new Error('Encryption failed - please try again');
  } else if (error.name === 'NotSupportedError') {
    // Algorithm not supported
    throw new Error('Browser does not support required encryption');
  }
  throw error;
}
```

## Compliance and Standards
- **FIPS 140-2**: All algorithms are FIPS-approved
- **NIST SP 800-56A**: ECDH implementation follows guidelines
- **RFC 5869**: HKDF implementation compliant
- **RFC 3394**: AES key wrapping standards
- **Common Criteria**: EAL4+ equivalent security level